{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Modal.svelte",
    "../../CreateHIT.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n\n  // import toast from 'bulma-toast';\n  import CreateHIT from './pages/CreateHIT.svelte';\n  import Home from './pages/Home.svelte';\n  import Sidebar from './pages/Sidebar.svelte';\n  import ReviewHIT from './pages/ReviewHIT.svelte';\n\n  const { ipcRenderer } = require('electron');\n\n  let awsKey;\n  let awsSecret;\n  let currentState = 'home';\n  let mturk;\n  let mturkReady = false;\n  let sandbox = true;\n  $: endpoint = sandbox\n    ? 'https://mturk-requester-sandbox.us-east-1.amazonaws.com'\n    : 'https://mturk-requester.us-east-1.amazonaws.com';\n  const stateMap = [\n    {\n      state: 'home',\n      title: 'Home',\n      component: Home,\n    },\n    {\n      state: 'createHIT',\n      title: 'Create HIT',\n      component: CreateHIT,\n    },\n    {\n      state: 'reviewHITs',\n      title: 'Review HITs',\n      component: ReviewHIT,\n    },\n  ];\n\n  $: [currentObj] = stateMap.filter((obj) => obj.state === currentState);\n  $: title = currentObj.title;\n  $: component = currentObj.component;\n\n  const receiveCredentials = (ev, credentials) => {\n    console.log('receiving credentials...');\n    awsKey = credentials.accessKeyId;\n    awsSecret = credentials.secretAccessKey;\n  };\n\n  ipcRenderer.on('credentials', receiveCredentials);\n\n  const createHIT = () => {\n    console.log('create HIT');\n  };\n\n  const initMTurk = () => {\n    // eslint-disable-next-line no-undef\n    mturk = new AWS.MTurk({\n      region: 'us-east-1',\n      endpoint,\n      // eslint-disable-next-line no-undef\n      accessKeyId: awsKey,\n      // eslint-disable-next-line no-undef\n      secretAccessKey: awsSecret,\n    });\n    mturkReady = true;\n    console.log(`Sandbox mode ${sandbox}`);\n  };\n\n\n  const logcreateHIT = (ev) => {\n    ipcRenderer.send('insert', ev.detail);\n  };\n\n  const updateState = (ev) => {\n    currentState = ev.detail.state;\n  };\n\n  onMount(() => {\n    ipcRenderer.send('getCredentials');\n  });\n</script>\n\n<style>\n  .is-scrollable {\n    overflow-y: auto;\n  }\n\n  .dashboard {\n    display: flex;\n    flex-direction: row;\n  }\n  .dashboard.is-full-height {\n    height: 100vh;\n  }\n  .dashboard-panel {\n    display: flex;\n    flex-direction: column;\n    padding: 2rem 1.5rem;\n    flex: 0 0 25rem;\n    height: 100%;\n  }\n  .dashboard-panel.is-medium {\n    flex: 0 0 20rem;\n  }\n  .dashboard-panel-header {\n    margin-bottom: 2rem;\n  }\n  .dashboard-main {\n    display: flex;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n  }\n</style>\n\n<svelte:head>\n  <script src=\"https://sdk.amazonaws.com/js/aws-sdk-2.590.0.min.js\" on:load={initMTurk}>\n\n  </script>\n</svelte:head>\n<div class=\"dashboard is-full-height\">\n  <div class=\"dashboard-panel is-medium has-thick-padding has-background-grey-lighter\">\n    <header class=\"dashboard-panel-header\">\n      <div class=\"has-text-centered\">\n        <h1 class=\"is-size-3\">Svelte-Turk</h1>\n        <span class=\"tag\" class:is-primary={mturkReady} class:is-danger={!mturkReady}>\n          Mturk\n          {#if !mturkReady}Not{/if}\n          Ready\n        </span>\n        <label class=\"checkbox is-block\">\n          <input type=\"checkbox\" bind:checked={sandbox} on:change={initMTurk} />\n          Sandbox\n        </label>\n        <hr />\n      </div>\n    </header>\n    <div class=\"dashboard-panel-content\">\n      <Sidebar on:changeState={updateState} />\n    </div>\n  </div>\n  <div class=\"dashboard-main is-scrollable\">\n    <section class=\"section\">\n      <p class=\"title is-size-2\">{title}</p>\n      <hr />\n      <section>\n        <svelte:component this={component} {mturk} on:createHIT={logcreateHIT} />\n      </section>\n    </section>\n  </div>\n</div>\n",
    "<script>\n  import { fly } from 'svelte/transition';\n\n  export let showModal = false;\n  export let modalType = 'notification';\n  \n  const setType = () => {\n    let color;\n    if (modalType === 'notification') {\n      color = 'is-info';\n    } else if (modalType === 'error') {\n      color = 'is-danger';\n    } else if (modalType === 'success') {\n      color = 'is-primary';\n    }\n    return `notification ${color}`;\n  }\n</script>\n\n<style>\n  .notification {\n    position: absolute;\n    z-index: 999;\n    top: .1rem;\n    left: 45%;\n    width: 35%;\n    text-align: center;\n  }\n</style>\n\n{#if showModal}\n  <div class=\"{setType()}\" transition:fly=\"{{ y: -200, duration: 500 }}\">\n    <button class=\"delete\" on:click={() => showModal = false} />\n      <slot/>\n  </div>\n{/if}\n",
    "<script>\n  // Create HIT form component to make a new HIT and persist HIT data to firebase\n  import { createEventDispatcher } from 'svelte';\n  // import toast from 'bulma-toast';\n\n  // Receive as input mturk object\n  export let mturk;\n  console.log(mturk);\n\n  // Create event dispatcher to tell App.svelte to write hits to db\n  const dispatch = createEventDispatcher();\n\n  // Create HIT vars\n  let assignmentDuration = 3600;\n  let description = '';\n  let lifetime = 86400;\n  let reward = '1';\n  let title = '';\n  let autoApprovalDelay = 10;\n  let keywords = 'research,experiment';\n  let maxAssignments = 2;\n  let externalURL = 'https://jovial-murdock-ae4d0b.netlify.com/';\n  let selectedQuals = ['--Unselect All--'];\n  const qualifications = ['--Unselect All--', '> 95% Approval', 'Adult only', 'US Only', 'Masters'];\n  $: {\n    if (selectedQuals.includes('--Unselect All--')) {\n      selectedQuals = [];\n    }\n  }\n\n  $: externalQuestion = `\n  <ExternalQuestion xmlns=\"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd\">\n  <ExternalURL>${externalURL}</ExternalURL>\n  <FrameHeight>900</FrameHeight>\n  </ExternalQuestion>`;\n\n  const createHIT = async () => {\n    console.log('create HIT');\n    try {\n      const resp = await mturk\n        .createHIT({\n          AssignmentDurationInSeconds: assignmentDuration,\n          Description: description,\n          LifetimeInSeconds: lifetime,\n          Reward: reward,\n          Title: title,\n          AutoApprovalDelayInSeconds: autoApprovalDelay,\n          Keywords: keywords,\n          MaxAssignments: maxAssignments,\n          Question: externalQuestion\n        })\n        .promise();\n      dispatch('createHIT', {\n        HITId: resp.HIT.HITId,\n        HITTypeId: resp.HIT.HITTypeId,\n        CreationTIme: resp.HIT.CreationTime.toString(),\n        Title: resp.HIT.Title,\n        Description: resp.HIT.Description,\n        Keywords: resp.HIT.Keywords,\n        HITStatus: resp.HIT.HITStatus,\n        MaxAssignments: resp.HIT.MaxAssignments,\n        Reward: resp.HIT.Reward,\n        AutoApprovalDelayInSeconds: resp.HIT.AutoApprovalDelayInSeconds,\n        Expiration: resp.HIT.Expiration.toString(),\n        AssignmentDurationInSeconds: resp.HIT.AssignmentDurationInSeconds,\n        HITReviewStatus: resp.HIT.HITReviewStatus,\n        NumberOfAssignmentsPending: resp.HIT.NumberOfAssignmentsPending,\n        NumberOfAssignmentsAvailable: resp.HIT.NumberOfAssignmentsAvailable,\n        NumberOfAssignmentsCompleted: resp.HIT.NumberOfAssignmentsCompleted\n      });\n      // toast.toast({\n      //   message: `HIT successfully created: ${resp.HIT.HITId}`,\n      //   type: 'is-success',\n      //   position: 'top-center',\n      //   pauseonHover: true,\n      //   dismissible: true,\n      //   duration: 5000,\n      //   animate: { in: 'fadeInDown', out: 'fadeOutUp' },\n      // });\n    } catch (error) {\n      // toast.toast({\n      //   message: `${error}`,\n      //   type: 'is-danger',\n      //   position: 'top-center',\n      //   pauseonHover: true,\n      //   dismissible: true,\n      //   duration: 5000,\n      //   animate: { in: 'fadeInDown', out: 'fadeOutUp' },\n      // });\n      console.error(error);\n    }\n  };\n\n  // const test = async () => {\n  //   try {\n  //     let resp = await mturk\n  //       .getHIT({\n  //         HITId: '3TZ0XG8CBUEU4B7DXAODGY7MD7M98N'\n  //       })\n  //       .promise();\n  //     console.log(resp);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n</script>\n\n<style>\n  .minheight {\n    min-height: 9rem !important;\n  }\n</style>\n\n<div class=\"container\">\n  <form on:submit|preventDefault={createHIT}>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Title</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={title} required />\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Keywords</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={keywords} required />\n            <p class=\"help\">Comma separated with no spaces</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Experiment URL</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={externalURL} required />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Reward</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={reward} required />\n            <p class=\"help\">Don't include $</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Approval Delay</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={autoApprovalDelay} required />\n            <p class=\"help\">In seconds</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Duration</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={assignmentDuration} required />\n            <p class=\"help\">In seconds. Default 1hr.</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Lifetime</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={lifetime} required />\n            <p class=\"help\">In seconds</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Max Assignments</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={maxAssignments} required />\n            <p class=\"help\">Number of available HITs</p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column is-narrow\">\n        <div class=\"field\">\n          <label class=\"label\">Qualifications</label>\n          <div class=\"control\">\n            <div class=\"select is-multiple minheight\">\n              <select multiple bind:value={selectedQuals}>\n                {#each qualifications as qual}\n                  <option value={qual}>{qual}</option>\n                {/each}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Description</label>\n          <div class=\"control\">\n            <textarea class=\"textarea minheight\" placeholder=\"\" bind:value={description} required />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <div class=\"field\">\n          <div class=\"control\">\n            <button class=\"button is-success\">Create HIT</button>\n          </div>\n        </div>\n      </div>\n      <!-- <div class=\"column\">\n        <div class=\"field\">\n          <div class=\"control\">\n            <button class=\"button is-success\" on:click|preventDefault={test}>Test</button>\n          </div>\n        </div>\n      </div> -->\n    </div>\n  </form>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAmFE,cAAc,cAAC,CAAC,AACd,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACrB,CAAC,AACD,UAAU,eAAe,cAAC,CAAC,AACzB,MAAM,CAAE,KAAK,AACf,CAAC,AACD,gBAAgB,cAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,IAAI,CAAC,MAAM,CACpB,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CACf,MAAM,CAAE,IAAI,AACd,CAAC,AACD,gBAAgB,UAAU,cAAC,CAAC,AAC1B,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,AACjB,CAAC,AACD,uBAAuB,cAAC,CAAC,AACvB,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,KAAK,AACnB,CAAC;AC7FD,aAAa,cAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,GAAG,CACZ,GAAG,CAAE,KAAK,CACV,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,MAAM,AACpB,CAAC;ACiFD,UAAU,eAAC,CAAC,AACV,UAAU,CAAE,IAAI,CAAC,UAAU,AAC7B,CAAC"
}