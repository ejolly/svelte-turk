{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/AdminPanel.svelte",
    "../src/components/Participants.svelte",
    "../src/components/CreateHIT.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import toast from 'bulma-toast';\n  import { auth } from '../utils.js';\n  import Home from './Home.svelte';\n  import HITs from './HITs.svelte';\n  import CreateHIT from './CreateHIT.svelte';\n  import Participants from './Participants.svelte';\n\n  export let AWSConfig;\n  let currentState = 'home';\n  let mturk;\n  let loading = false;\n  let mturkReady = false;\n  let sandbox = true;\n  $: endpoint = sandbox\n    ? 'https://mturk-requester-sandbox.us-east-1.amazonaws.com'\n    : 'https://mturk-requester.us-east-1.amazonaws.com';\n  const stateMap = [\n    {\n      state: 'home',\n      title: 'Home',\n      component: Home\n    },\n    {\n      state: 'hits',\n      title: 'HIT Management',\n      component: HITs\n    },\n    {\n      state: 'firebase-participants',\n      title: 'Participants',\n      component: Participants\n    },\n    {\n      state: 'mturk-createhit',\n      title: 'Create HIT',\n      component: CreateHIT\n    }\n  ];\n\n  $: [currentObj] = stateMap.filter((obj) => obj.state === currentState);\n  $: title = currentObj.title;\n  $: component = currentObj.component;\n\n  const logout = async () => {\n    try {\n      loading = true;\n      await auth.signOut();\n    } catch (error) {\n      console.error(error);\n    }\n    loading = false;\n  };\n\n  const createHIT = () => {\n    console.log('create HIT');\n  };\n\n  const initMTurk = () => {\n    // eslint-disable-next-line no-undef\n    mturk = new AWS.MTurk({\n      region: 'us-east-1',\n      endpoint,\n      accessKeyId: AWSConfig.accessKeyId,\n      secretAccessKey: AWSConfig.secretAccessKey\n    });\n    mturkReady = true;\n  };\n\n  const accountBalance = async () => {\n    try {\n      const resp = await mturk.getAccountBalance().promise();\n      toast.toast({\n        message: `Account Balance: $${resp.AvailableBalance}`,\n        type: 'is-primary',\n        position: 'top-center',\n        pauseonHover: true,\n        dismissible: true,\n        duration: 5000,\n        animate: { in: 'fadeInDown', out: 'fadeOutUp' }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n</script>\n\n<style>\n  .is-scrollable {\n    overflow-y: auto;\n  }\n\n  .dashboard {\n    display: flex;\n    flex-direction: row;\n  }\n  .dashboard.is-full-height {\n    height: 100vh;\n  }\n  .dashboard-panel {\n    display: flex;\n    flex-direction: column;\n    padding: 2rem 1.5rem;\n    flex: 0 0 25rem;\n    height: 100%;\n  }\n  .dashboard-panel.left {\n    flex: 0 0 25rem;\n  }\n  .dashboard-panel.right {\n    flex: 0 0 25rem;\n  }\n  .dashboard-panel.has-thick-padding {\n    padding: 3rem 2rem;\n  }\n  .dashboard-panel.is-one-quarter {\n    flex: 0 0 25%;\n  }\n  .dashboard-panel.is-half {\n    flex: 0 0 50%;\n  }\n  .dashboard-panel.is-one-third {\n    flex: 0 0 33.3333333333%;\n  }\n  .dashboard-panel.is-small {\n    flex: 0 0 15rem;\n  }\n  .dashboard-panel.is-medium {\n    flex: 0 0 20rem;\n  }\n  .dashboard-panel.is-large {\n    flex: 0 0 30rem;\n  }\n  .dashboard-panel-header.is-centered,\n  .dashboard-panel-content.is-centered,\n  .dashboard-panel-footer.is-centered {\n    display: flex;\n    justify-content: center;\n  }\n  .dashboard-panel-header {\n    margin-bottom: 2rem;\n  }\n  .dashboard-panel-main {\n    flex: 1;\n  }\n  .dashboard-panel-footer {\n    margin-top: 2rem;\n  }\n  .dashboard-main {\n    display: flex;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n  }\n  .dashboard-main .navbar.is-fixed-top {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n  }\n  .dashboard-main .footer {\n    flex: 1;\n  }\n</style>\n\n<svelte:head>\n  <script src=\"https://sdk.amazonaws.com/js/aws-sdk-2.590.0.min.js\" on:load={initMTurk}>\n\n  </script>\n</svelte:head>\n<div class=\"dashboard is-full-height\">\n  <div class=\"dashboard-panel is-medium has-thick-padding has-background-grey-lighter\">\n    <header class=\"dashboard-panel-header\">\n      <div class=\"has-text-centered\">\n        <h1 class=\"is-size-3\">Svelte-Turk</h1>\n        <span class=\"tag\" class:is-primary={mturkReady} class:is-danger={!mturkReady}>\n          Mturk\n          {#if !mturkReady}Not{/if}\n          Ready\n        </span>\n        <label class=\"checkbox is-block\">\n          <input type=\"checkbox\" bind:checked={sandbox} on:change={initMTurk} />\n          Sandbox\n        </label>\n        <hr />\n      </div>\n    </header>\n    <div class=\"dashboard-panel-content\">\n      <aside class=\"menu has-text-white\">\n        <p class=\"menu-label\">Home</p>\n        <ul class=\"menu-list\">\n          <li>\n            <a href=\"javascript:;\" on:click={() => (currentState = 'home')}>Overview</a>\n          </li>\n          <li>\n            <a href=\"javascript:;\" on:click={accountBalance}>Account Balance</a>\n          </li>\n        </ul>\n        <p class=\"menu-label\">Firebase</p>\n        <ul class=\"menu-list\">\n          <li>\n            <a href=\"javascript:;\" on:click={() => (currentState = 'firebase-participants')}>\n              Participants\n            </a>\n            <a href=\"javascript:;\" on:click={createHIT}>Stimuli</a>\n          </li>\n        </ul>\n        <p class=\"menu-label\">HITs</p>\n        <ul class=\"menu-list\">\n          <li>\n            <a href=\"javascript:;\" on:click={() => (currentState = 'mturk-createhit')}>\n              Create HITs\n            </a>\n          </li>\n          <li>\n            <a href=\"javascript:;\" on:click={createHIT}>Replenish HITs</a>\n          </li>\n          <li>\n            <a href=\"javascript:;\" on:click={createHIT}>End HITs</a>\n          </li>\n          <li>\n            <a href=\"javascript:;\" on:click={createHIT}>Review HITs</a>\n          </li>\n        </ul>\n        <p class=\"menu-label\">Assignments</p>\n        <ul class=\"menu-list\">\n          <li>\n            <a href=\"javascript:;\" on:click={createHIT}>Approve Assignments</a>\n          </li>\n          <li>\n            <a href=\"javascript:;\" on:click={createHIT}>See Assignments</a>\n          </li>\n        </ul>\n        <p class=\"menu-label\">\n          <button class=\"button is-primary\" class:is-loading={loading} on:click={logout}>\n            Log Out\n          </button>\n        </p>\n      </aside>\n    </div>\n  </div>\n  <div class=\"dashboard-main is-scrollable\">\n    <section class=\"section\">\n      <p class=\"title is-size-2\">{title}</p>\n      <hr />\n      <section>\n        <svelte:component this={component} {mturk} />\n      </section>\n    </section>\n  </div>\n</div>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { db } from '../utils.js';\n\n  let participants = [];\n  // For testing\n  // const participants = [\n  //   {\n  //     assignmentId: 'debugdRqEW',\n  //     currentState: 'instructions',\n  //     currentTrial: 1,\n  //     hitId: 'debugzG2yr',\n  //     startTime: 1576279764733,\n  //     trialOrder: [\n  //       's01_TimRiggins.wav',\n  //       's01_CoachTaylor.wav',\n  //       's01_BuddyGarrity.wav',\n  //       's01_LandryClarke.wav',\n  //       's01_JulieTaylor.wav',\n  //       's01_TamiTaylor.wav',\n  //       's01_MattSaracen.wav',\n  //       's01_LylaGarrity.wav',\n  //       's01_JasonStreet.wav',\n  //       's01_SmashWilliams.wav'\n  //     ],\n  //     workerId: 'debugomUfs'\n  //   },\n  //   {\n  //     assignmentId: 'test-assignment',\n  //     currentState: 'quiz',\n  //     currentTrial: 1,\n  //     hitId: 'test-hit',\n  //     quiz_start: 1576340034657,\n  //     startTime: 1576339962895,\n  //     trialOrder: [\n  //       's01_BuddyGarrity.wav',\n  //       's01_SmashWilliams.wav',\n  //       's01_LandryClarke.wav',\n  //       's01_JulieTaylor.wav',\n  //       's01_LylaGarrity.wav',\n  //       's01_JasonStreet.wav',\n  //       's01_MattSaracen.wav',\n  //       's01_TimRiggins.wav',\n  //       's01_TamiTaylor.wav',\n  //       's01_CoachTaylor.wav'\n  //     ],\n  //     workerId: 'test-worker'\n  //   }\n  // ];\n  let rowSelected = false;\n  let search = '';\n  let timer;\n  let participantsFiltered = [];\n\n  const selectRow = (ev) => {\n    // Get all rows\n    const rows = document.getElementsByClassName('table-row');\n    // Get click row\n    const row = ev.target.parentNode;\n    // If clicked row already has class unselected it and all other rows\n    if (row.className === 'table-row is-selected') {\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      rowSelected = false;\n    } else {\n      // Otherwise unselect everything else first then select this one\n      for (const r of rows) {\n        r.className = 'table-row';\n      }\n      row.className += ' is-selected';\n      rowSelected = true;\n    }\n  };\n\n  const formatDate = (date) => {\n    const dateTime = new Date(date);\n    const year = dateTime.getFullYear() - 2000;\n    const month = dateTime.getMonth();\n    const day = dateTime.getDate();\n    let hours = dateTime.getHours();\n    let ampm;\n    if (hours > 12) {\n      ampm = 'pm';\n      hours -= 12;\n    } else if (hours === 12) {\n      ampm = 'pm';\n    } else {\n      ampm = 'am';\n    }\n    hours = hours > 12 ? hours - 12 : hours;\n    let minutes = dateTime.getMinutes();\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${month}/${day}/${year} - ${hours}:${minutes}${ampm}`;\n  };\n\n  const filterEntries = () => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      participantsFiltered = participants.filter((obj) => {\n        const vals = Object.values(obj);\n        const filteredVals = vals.filter((val) => {\n          let formattedVal;\n          if (typeof val === 'number' && val > 1000) {\n            formattedVal = formatDate(val);\n          } else {\n            formattedVal = String(val);\n          }\n          return formattedVal.indexOf(search) !== -1;\n        });\n        return filteredVals.length !== 0;\n      });\n    }, 400);\n  };\n\n  const clearSearch = () => {\n    search = '';\n    filterEntries();\n  };\n  onMount(async () => {\n    db.ref('participants').on('value', (snapshot) => {\n      participants = [];\n      snapshot.forEach((doc) => {\n        participants.push(doc.val());\n      });\n      participants = participants;\n      participantsFiltered = participants;\n    });\n  });\n</script>\n\n<style>\n  .status {\n    pointer-events: none;\n  }\n  .control.has-icons-right .icon {\n    pointer-events: auto !important;\n  }\n</style>\n\n<div class=\"columns\">\n  <div class=\"column has-text-left\">\n    <div class=\"columns\">\n      <div class=\"column is-full\">\n        <div class=\"field is-grouped\">\n          <p class=\"control\">\n            <button class=\"button is-link\">Approve All HITs</button>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"column has-text-right\">\n    <div class=\"field is-grouped\" class:is-invisible={!rowSelected}>\n      <p class=\"control\">\n        <button class=\"button is-danger\">End Experiment</button>\n      </p>\n      <p class=\"control\">\n        <button class=\"button is-success\">Approve HIT</button>\n      </p>\n    </div>\n  </div>\n</div>\n<hr />\n<div class=\"columns\">\n  <div class=\"column is-full\">\n    <div class=\"level\">\n      <div class=\"level-left\">\n        <div class=\"level-item\">\n          <p>\n            <strong>Total Participants:</strong>\n            {participantsFiltered.length}\n          </p>\n        </div>\n      </div>\n      <div class=\"level-right\">\n        <div class=\"level-item\">\n          <div class=\"field\">\n            <p class=\"control has-icons-right\">\n              <input\n                class=\"input\"\n                type=\"text\"\n                placeholder=\"Find a participant\"\n                bind:value={search}\n                on:keyup={() => filterEntries()} />\n              {#if search}\n                <span class=\"icon is-small is-right\" on:click={clearSearch}>\n                  <i class=\"fas fa-times\" />\n                </span>\n              {/if}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"table-container\">\n      <table class=\"table is-hoverable\">\n        <thead>\n          <tr>\n            <th>Worker Id</th>\n            <th>Experiment State</th>\n            <th>Current Trial</th>\n            <th>Started HIT</th>\n            <th>HIT Id</th>\n            <th>Assignment Id</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {#each participantsFiltered as participant}\n            <tr class=\"table-row\" on:click={selectRow}>\n              <td type=\"text\">{participant.workerId}</td>\n              <td type=\"text\">{participant.currentState}</td>\n              <td type=\"number\">{participant.currentTrial}</td>\n              <td type=\"text\">{formatDate(participant.startTime)}</td>\n              <td type=\"text\">{participant.hitId}</td>\n              <td type=\"text\">{participant.assignmentId}</td>\n              <td>\n                <span class=\"tag is-primary status\">Complete</span>\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n",
    "<script>\n  import toast from 'bulma-toast';\n  import { db } from '../utils.js';\n\n  export let mturk;\n  // Create HIT vars\n  let assignmentDuration = 3600;\n  let description = '';\n  let lifetime = 86400;\n  let reward = '1';\n  let title = '';\n  let autoApprovalDelay = 10;\n  let keywords = 'research,experiment';\n  let maxAssignments = 2;\n  let externalURL = 'https://jovial-murdock-ae4d0b.netlify.com/';\n  let selectedQuals = ['--Unselect All--'];\n  const qualifications = ['--Unselect All--', '> 95% Approval', 'Adult only', 'US Only', 'Masters'];\n  $: {\n    if (selectedQuals.includes('--Unselect All--')) {\n      selectedQuals = [];\n    }\n  }\n\n  $: externalQuestion = `\n  <ExternalQuestion xmlns=\"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd\">\n  <ExternalURL>${externalURL}</ExternalURL>\n  <FrameHeight>900</FrameHeight>\n  </ExternalQuestion>`;\n\n  // Add qualifications\n  // https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#CustomQualificationsandSystemQualifications\n  // Prevent retakes: https://otree.readthedocs.io/en/latest/mturk.html#preventing-retakes-repeat-workers\n  //   {\n  //     'QualificationTypeId': \"3E3LRXDRZ2RI5IIRZ0V4FUY30LEY5A\",\n  //     'Comparator': \"DoesNotExist\",\n  //  // },\n\n  // createAdditionalAssignmentsForHIT(HITId, NUmberOfAdditionalAssignments, UniqueRequestToken (optional))\n  // approveAssignment(AssignmentId, OverrideRejection(bool;optional), RequesterFeedback(string))\n  // getAssignment(AssignmentId) only for submitted assignments\n  // getHIT\n  // listAssignmentsForHIT\n  // listBonusPayments\n  // listHITs\n\n  const createHIT = async () => {\n    console.log('create HIT');\n    try {\n      let resp = await mturk\n        .createHIT({\n          AssignmentDurationInSeconds: assignmentDuration,\n          Description: description,\n          LifetimeInSeconds: lifetime,\n          Reward: reward,\n          Title: title,\n          AutoApprovalDelayInSeconds: autoApprovalDelay,\n          Keywords: keywords,\n          MaxAssignments: maxAssignments,\n          Question: externalQuestion\n        })\n        .promise();\n      await db.ref(`hits/${resp.HIT.HITId}`).set({\n        HITId: resp.HIT.HITId,\n        HITTypeId: resp.HIT.HITTypeId,\n        CreationTIme: resp.HIT.CreationTime.toString(),\n        Title: resp.HIT.Title,\n        Description: resp.HIT.Description,\n        Keywords: resp.HIT.Keywords,\n        HITStatus: resp.HIT.HITStatus,\n        MaxAssignments: resp.HIT.MaxAssignments,\n        Reward: resp.HIT.Reward,\n        AutoApprovalDelayInSeconds: resp.HIT.AutoApprovalDelayInSeconds,\n        Expiration: resp.HIT.Expiration.toString(),\n        AssignmentDurationInSeconds: resp.HIT.AssignmentDurationInSeconds,\n        HITReviewStatus: resp.HIT.HITReviewStatus,\n        NumberOfAssignmentsPending: resp.HIT.NumberOfAssignmentsPending,\n        NumberOfAssignmentsAvailable: resp.HIT.NumberOfAssignmentsAvailable,\n        NumberOfAssignmentsCompleted: resp.HIT.NumberOfAssignmentsCompleted\n      });\n      toast.toast({\n        message: `HIT successfully created: ${resp.HIT.HITId}`,\n        type: 'is-success',\n        position: 'top-center',\n        pauseonHover: true,\n        dismissible: true,\n        duration: 5000,\n        animate: { in: 'fadeInDown', out: 'fadeOutUp' }\n      });\n      window.x = resp.HIT.CreationTime;\n    } catch (error) {\n      toast.toast({\n        message: `${error}`,\n        type: 'is-danger',\n        position: 'top-center',\n        pauseonHover: true,\n        dismissible: true,\n        duration: 5000,\n        animate: { in: 'fadeInDown', out: 'fadeOutUp' }\n      });\n      console.error(error);\n    }\n  };\n\n  const test = async () => {\n    try {\n      // let resp = await mturk\n      //   .listAssignmentsForHIT({\n      //     HITId: '3TZ0XG8CBUEU4B7DXAODGY7MD7M98N'\n      //   })\n      //   .promise();\n      let resp = await mturk\n        .getHIT({\n          HITId: '3TZ0XG8CBUEU4B7DXAODGY7MD7M98N'\n        })\n        .promise();\n      console.log(resp);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n</script>\n\n<style>\n  .minheight {\n    min-height: 9rem !important;\n  }\n</style>\n\n<div class=\"container\">\n  <form on:submit|preventDefault={createHIT}>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Title</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={title} required />\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Keywords</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={keywords} required />\n            <p class=\"help\">Comma separated with no spaces</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Experiment URL</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={externalURL} required />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Reward</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={reward} required />\n            <p class=\"help\">Don't include $</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Approval Delay</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={autoApprovalDelay} required />\n            <p class=\"help\">In seconds</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Duration</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={assignmentDuration} required />\n            <p class=\"help\">In seconds. Default 1hr.</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Lifetime</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={lifetime} required />\n            <p class=\"help\">In seconds</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Max Assignments</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" bind:value={maxAssignments} required />\n            <p class=\"help\">Number of available HITs</p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column is-narrow\">\n        <div class=\"field\">\n          <label class=\"label\">Qualifications</label>\n          <div class=\"control\">\n            <div class=\"select is-multiple minheight\">\n              <select multiple bind:value={selectedQuals}>\n                {#each qualifications as qual}\n                  <option value={qual}>{qual}</option>\n                {/each}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <label class=\"label\">Description</label>\n          <div class=\"control\">\n            <textarea class=\"textarea minheight\" placeholder=\"\" bind:value={description} required />\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column\">\n        <div class=\"field\">\n          <div class=\"control\">\n            <button class=\"button is-success\">Create HIT</button>\n          </div>\n        </div>\n      </div>\n      <div class=\"column\">\n        <div class=\"field\">\n          <div class=\"control\">\n            <button class=\"button is-success\" on:click|preventDefault={test}>Test</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAwFE,cAAc,cAAC,CAAC,AACd,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACrB,CAAC,AACD,UAAU,eAAe,cAAC,CAAC,AACzB,MAAM,CAAE,KAAK,AACf,CAAC,AACD,gBAAgB,cAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,IAAI,CAAC,MAAM,CACpB,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CACf,MAAM,CAAE,IAAI,AACd,CAAC,AAOD,gBAAgB,kBAAkB,cAAC,CAAC,AAClC,OAAO,CAAE,IAAI,CAAC,IAAI,AACpB,CAAC,AAaD,gBAAgB,UAAU,cAAC,CAAC,AAC1B,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,AACjB,CAAC,AAUD,uBAAuB,cAAC,CAAC,AACvB,aAAa,CAAE,IAAI,AACrB,CAAC,AAOD,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,KAAK,AACnB,CAAC;ACtBD,OAAO,eAAC,CAAC,AACP,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,QAAQ,+BAAgB,CAAC,KAAK,eAAC,CAAC,AAC9B,cAAc,CAAE,IAAI,CAAC,UAAU,AACjC,CAAC;ACdD,UAAU,eAAC,CAAC,AACV,UAAU,CAAE,IAAI,CAAC,UAAU,AAC7B,CAAC"
}